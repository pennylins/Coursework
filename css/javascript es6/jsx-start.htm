<!DOCTYPE html>
<html>
<head>
    <meta chartset="utf-8"/>
    <title>JSX 語法</title>
    <script src="https://unpkg.com/react@16/umd/react.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js" crossorigin></script>
    <!-- 載入 Babel 編譯器套件-->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <!-- 包含 JSX 語法的 Javascript 必須使用 type="text/babel"-->
    <style type="text/css">
        .head{font-size:24px;font-weight:bold;}
    </style>
    <script type="text/babel">
        // 設計組件類別
        class MyHead extends React.Component{
            render(){
                // 建立以【原生 HTML 標籤】為基礎的 React Element
                // JSX中套用【行內css語法】(以下兩種都可以 React寫法 & JSX寫法)
                return React.createElement("div",
                 {className:"head", style:{color:this.props.color}}, "Heool Everyone"+this.props.level);
                //return <div className="head" style={{color:this.props.color}}>Hello World {this.props.level}</div>;
            }
        } 
        class MyHeadlist extends React.Component{
            render(){
                return <div>
                    <MyHead level="1" color="red"/>
                    <MyHead level="2" color="green"/>
                    <MyHead level="3" color="blue"/>
                </div>
            }
        }
        window.addEventListener("load",()=>{
            // 1. 建立自訂的 React 組件實體，並提供組件的屬性物件
            let myElement=<MyHeadlist/>; //相當於 React.createElement(Myheadlist);
             //2. 將建立好的 React 組件實體畫到容器中
            ReactDOM.render(
                myElement, document.body
            );
        });
    </script>


</head>
<body>

</body>
</html>