<!DOCTYPE html>
<html>
<head>
    <meta chartset="utf-8"/>
    <title>Redux 基本操作</title>
    <script src="https://unpkg.com/redux@4.0.5/dist/redux.min.js"></script>
    <script>
        let store;
        let reducer=function(state /* 目前的狀態物件 */, action /* 接收到的行動物件 */){
            // 無論狀態是否改變，都【一定要回傳】 狀態物件，新的狀態物件會【完全取代】舊的狀態物件
            switch(action.type){
                case "UPDATE_SWITCH":
                    return {on:!state.on};
                default:
                    return state;
            }
        }
        let handler=function(){
            // 一旦狀態有變化，就會被呼叫
            let state=store.getState(); // 把最新的狀態印出來
            document.body.innerHTML=state.on?"on":"off";
        }
        window.addEventListener("load", ()=>{
            // 建立狀態儲存空間，必須準備號狀態處理函式( Reducer )，以及初始的狀態物件(後面的on:false物件)
            store=Redux.createStore(reducer, {on:false});
            // 註冊回應狀態改變的函式
            let unsubscribe=store.subscribe(handler);
            //unsubscribe(); // 取消對應的、已註冊的狀態改變函式
            document.addEventListener("click", ()=>{
                // 建立行動物件，並且透過 dispatch　派送給狀態處理函式 (Reducer)，改變狀態
                // 行動物件: 唯一的要求，一定要提供 type 屬性，代表行動是什麼
                store.dispatch({
                    type:"UPDATE_SWITCH"
                });
            })
        })
    </script>
</head>
<body>
    off 
</body>
</html>