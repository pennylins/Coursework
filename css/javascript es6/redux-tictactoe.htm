<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <title>井字遊戲</title>
    <script src="https://unpkg.com/react@16/umd/react.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js" crossorigin></script>
    <!-- 載入 Babel 編譯器套件-->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/redux@4.0.5/dist/redux.js"></script>
    <style type="text/css">
        .board{
            width:300px;
            height:300px;
            margin:50px auto;
            border:5px solid #000000;
            border-radius:15px;
            position:relative;
        }
        .board>.cell{
            box-sizing:border-box;
            width:100px;
            height:100px;
            line-height:100px;
            font-size:56px;
            text-align:center;
            border:1px solid #000000;
            cursor:pointer;
            display:inline-block;
            vertical-align:middle;
        }
        .board>.line{
            position:absolute;
            top:0px;
            left:0px;
            width:300px;
            height:300px
        }
    </style>
    <script type="text/babel">
        // 建立贏家的線條呈現
        class Line extends React.Component{
            render(){
                // 根據贏家的資訊: startIndex 和 endIndex，把線條用 svg 標籤畫在畫面上
                let startX=this.props.startIndex%3;
                let startY=Math.floor(this.props.startIndex/3);
                let endX=this.props.endIndex%3;
                let endY=Math.floor(this.props.endIndex/3);
                return <svg className="line">
                <line x1={startX*100+50} y1={startY*100+50} x2={endX*100+50} y2={endY*100+50} stroke="red" strokeWidth="10"/></svg>;
            }
        }
        // 建立框框組件
        class Cell extends React.Component{
            render(){
                // 根據 mark 的資料，決定框框中的文字。 -1:"", 0:"O", 1:"X"
                let text="";
                if(this.props.mark===0){
                    text="O";
                }else if(this.props.mark===1){
                    text="X";
                }
                return <div className="cell" onClick={this.click.bind(this)}>{text}</div>;
            }
            click(){
                this.props.update(this.props.index);
            }
        }
        // 建立遊戲盤組件
        class Board extends React.Component{
            constructor(props){
                super(props);
                /*
                    框框在 marks 中的編號 (index)
                    0 1 2
                    3 4 5 
                    6 7 8 
                */
                // 應用程式狀態
                this.state=redux.store.getState();
            }
            render(){
                let cells=[];
                for(let i=0;i<this.state.marks.length;i++){
                    cells.push(<Cell index={i}  mark={this.state.marks[i]}
                    update={this.updateMark.bind(this)}/>);
                }
                if(this.state.winner!==null){
                    cells.push(<Line startIndex={this.state.winner.startIndex} 
                        endIndex={this.state.winner.endIndex}/>);
                }
                return <div className="board">{cells}</div>;
            }
            updateMark(index){
                redux.store.dispatch({
                    type:"UpdateMark",
                    index:index
                });
            }
            
            // 以下程式建立和 Redux 的連結
            refresh(){
                // 把 Redux 的狀態設定給組件，觸發畫面更新
                this.setState(redux.store.getState());
            }
            componentDidMount(){
                this.unsubscribe=redux.store.subscribe(this.refresh.bind(this));
            }
            ComponentWillUnmount(){
                this.unsubscribe();
            }
        };
        // 以下是 Redux 相關程式
        let redux={
            store:null,
            reducer:function(state, action){
                switch(action.type){
                case "UpdateMark":
                 /* 
                1.目前的標記必須是 -1, 代表是空白
                2.目前沒有贏家
                */
                    let currentMark=state.marks[action.index];
                    if(currentMark===-1&&state.winner===null){ // 符合更新條件
                        let mark=state.circle%2; //根據回合數，決定要畫圈或畫叉
                        state.marks[index]=mark; // 把圈 or 叉的標記，記錄到 marks 裡面
                        let winner=redux.checkWinner(state.marks);
                        return {
                            circle:state.circle+1,
                            marks:state.marks,
                            winner:winner
                        };
                    }else{ //不符合更新條件，不更新狀態
                        return state;
                    }
                default:
                    return state;
                } 
            },
            checkWinner:function(marks){
                /*
                    若有贏家，回傳
                    {side: 贏家是圈或叉， startIndex: 線條起點框框編號，endIndex: 線條終點框框編號}

                    框框在 marks 中的編號 (index)
                        0 1 2
                        3 4 5 
                        6 7 8 
                */
                // 偵測水平方向的三條線是否有相同的標記=>是否連線
                let index;
                for(let y=0;y<3;y++){
                    if(marks[y*3]!==-1&&marks[y*3]===marks[y*3+1]&&marks[y*3+1]===marks[y*3+2]){
                        return {side:marks[y*3], startIndex:y*3,endIndex:y*3+2};
                    }
                }
                // 偵測垂直方向的三條線是否有相同的標記=>是否連線
                for(let x=0;x<3;x++){
                    if(marks[x]!==-1&&marks[x+3]===marks[y*3+1]&&marks[3+x]===marks[2*3+x]){
                        return {side:marks[x], startIndex:x, endIndex:x+2*3};
                    }
                }
                // 偵測斜線方向的2條線是否有相同的標記=>是否連線
                if(marks[0]!==-1&&marks[0]===marks[4]&&marks[4]===[8]){
                    return {side:marks[0],startIndex:0, endIndex:8}
                }else if(marks[2]!==-1&&marks[2]===marks[4]&&marks[4]===marks[6]){
                    return {side:marks[2], startIndex:2, endIndex:6};
                }
                // 目前還沒有贏家
                return null;
            }
        } 

        window.addEventListener("load", ()=>{
            // 初始化 Redux 儲存空間
            redux.store=Redux.createStore(redux.reducer, {
                circle:0,  //回合數
                marks:[-1,-1,-1,-1,-1,-1,-1,-1,-1],  // 框框標記: -1=無， 0=圈，1=叉
                winner:null // 贏家的資訊，null代表沒有
            });
            ReactDOM.render(<Board/>, document.body); 
        });    
    </script>
</head>
<body>
</body>
</html>