<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <title>Redux 列表介面</title>
    <script src="https://unpkg.com/react@16/umd/react.production.min.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js" crossorigin></script>
    <!-- 載入 Babel 編譯器套件-->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/redux@4.0.5/dist/redux.js"></script>
    <script type="text/babel">
        // MyHead 組件，根據 props 中的資料顯示列表文字
        class MyHead extends React.Component{
            constructor(props){
                super(props);
            }
            render(){
                return <li>Hello World {this.props.level}</li>;
            }
        }
        // MyHeadlist 組件，根據 state 中的資料決定要顯示多少列表項目
        class MyHeadlist extends React.Component{
            constructor(props){
                super(props);
                // 原本是寫狀態的地方{max:3}, 現在直接用 Redux 的 Store 來取代
                this.state=store.getState();
            }
            render(){
                let cells=[];
                for(let i=0;i<this.state.max;i++){
                    cells.push(<MyHead level={i}/>);
                }
                return <ul onClick={this.update.bind(this)}>{cells}</ul>;
            }
            update(){
                store.dispatch({
                    type:"ChangeMax",
                    max:5,
                })
            }
            // 以下程式是用來連接 React 和 Redux 
            refresh(){
                // 串接 Redux 的狀態改變，並且觸發 React 組件的更新
                this.setState(store.getState());
            }
            componentDidMount(){
                // 當 Redux 的狀態有所變化的時候，會通知/呼叫 refresh 方法
                this.unsubscribe=store.subscribe(this.refresh.bind(this));
            }
            componentWillUnmount(){
                // 清除連接點
                this.unsubscribe();
            }

        }
        // 以下是 Redux 程式(將React中的【狀態】部分外包給 Redux)
        let store;
        let reducer=function(state, action){
            // 根據 action 的 type ，來執行狀態更新的動作
            switch(action.type){
                case "ChangeMax":
                    return {max:action.max};
                default:
                    return state;

            }

        };

        window.addEventListener("load", ()=>{
            // 初始化 Redux 的儲存空間
            store=Redux.createStore(reducer,{max:3});
            // 初始化 React 的畫面
            ReactDOM.render(<MyHeadlist/>, document.body);

        })

    </script>
</head>
<body>

</body>
</html>