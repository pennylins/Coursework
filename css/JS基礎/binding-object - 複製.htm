<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>函式的綁定物件 this 進階篇</title>
</head>
<body>
    <script>
    //【基礎】
    // this 代表函式的【綁定物件】，通常在函式中使用
    // 不同的程式碼脈絡下，【綁定物件】代表不同的東西

    // 情況一: 獨立的函式
    /*function test(){
        console.log(this); // this 就是 window 物件
        console.log(this.innerWidth); //  印出視窗的寬度
    }
    test();
    */
    // 情況二: 物件的方法
    /*let obj={
        x:3,
        test:function(){
            console.log(this); // this 就是方法所屬的物件本身
            console.log(this.x);  // 印出物件的屬性 x
        }
    };
    obj.test();
    */
    // 情況三: 事件處理函式
    /*document.addEventListener("click", function(){
        console.log(this); // this 就是觸發事件的對象物件(=document)
        this.body.innerHTML="Clicked";
    });
    */
    // 情況四: 建構函式
    /*function Point(){
        console.log(this); // this 就是瀏覽器自動幫我們新建立好的空白物件
        this.x=3;
        this.y=4;
    }
    let p1=new Point();
    console.log(p1);
    */

    // 【進階】:自訂的綁定物件
    // 使用 bind 重新綁定物件
    /* function test(){
        console.log("綁定物件",this);
    }
    test();
    let test2=test.bind({x:3});
    test2();
    let test3=test.bind(document);
    test3();
    */
    // 使用 apply 呼叫函式，可自己設定綁定物件(有陣列)
    function add(n1,n2){
        console.log("結果", n1+n2);
        console.log("綁定物件",this);
    }
    add(3,4); // 基本的函式呼叫，無法自己設定綁定物件
    add.apply({y:4},[4,5]);
    add.apply(document,[5,6]);
    // 使用 call 呼叫函式，可自己設定綁定物件("不用"陣列，直接寫，用逗號隔開即可)
    add.call({z:10},10,4);
    </script>
</body>
</html>